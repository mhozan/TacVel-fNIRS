function jobs = basic_preprocessing2

jobs=nirs.modules.ImportData();
jobs.Input='raw';
% jobs=nirs.modules.RemoveShortSeperations(jobs);  %testing to see if the SS bundle is better ommitted
% jobs=nirs.modules.RemoveStimless(jobs);

%% prunestim
trial_onset_shift = 0;
jobs = nirs.cnl.prunestim(jobs); %annotate 
        % jobs.stims2keep = {'intro'};

% jobs.unifystims = true; %true if stim_on vs stim_off comparison is desired. default is false.
jobs.trial_onset_shift = trial_onset_shift;
jobs.trial_dur = 5;
jobs.stims2keep = {'intro','v20cmps','v25cmps','v31cmps','v39cmps'};
% jobs.stims2keep = {'intro'};
%% resize heads (optional)
jobs = nirs.modules.Resize_Heads(jobs);
jobs.demographics_key = 'HeadCircumference_mm';


%% pruneaux
jobs = nirs.cnl.pruneaux(jobs);
jobs.resampleaux = true; %makes all the aux the same sampling fre as the nirs data (8.9Hz); Might cause GLM issues if all the regressors are not the same frequency 
jobs.visualize = false;
% jobs.aux2keep = {'NIRmidline','XYZ_acceleration','Respiration_rate'}; % Promising
% jobs.aux2keep = {'XYZ_acceleration','Respiration_rate','EMG_face'};
% jobs.aux2keep = {'XYZ_acceleration','Respiration_rate','Eyeblink','hand'};

jobs.aux2keep = {'XYZ_acceleration','Respiration_rate'};
jobs.aux2keep = {'XYZ_acceleration'};
jobs.aux2keep = {'Respiration_rate'};
jobs.aux2keep = {'XYZ_acceleration'}; 
jobs.aux2keep = {'Eyeblink','Respiration_rate','XYZ_acceleration'}; % 
jobs.aux2keep = {'Eyeblink','Respiration_rate','XYZ_acceleration'}; % 
jobs.aux2keep = {'Respiration_rate','Xaccel','Yaccel','Zaccel'}; % 
% jobs.aux2keep = {'Respiration_rate'}; % 
% jobs.aux2keep = {'Xaccel','Yaccel','Zaccel','Eyeblink','Respiration_rate'}; % 
% jobs.aux2keep = {'XYZ_acceleration','Eyeblink','Respiration_rate'}; % 
% jobs.aux2keep = {'Xaccel','Yaccel','Zaccel','hand','Respiration_rate','Eyeblink','iblink','ADI'}; % 
% jobs.aux2keep = {'Xaccel','Yaccel','Zaccel','hand','Respiration_rate','Eyeblink','iblink','ADI'}; % 
jobs.aux2keep = {'Xaccel','Yaccel','Zaccel','Respiration_rate','ADI','eyeblink','hand'}; % 
% jobs.aux2keep = {'Respiration_rate','ADI'}; % 
% jobs.aux2keep = {'XYZ_acceleration'}; % 

% jobs.aux2keep = {'Respiration_rate'}; % 
% jobs.aux2keep = {'Xaccel','Yaccel','Zaccel','Respiration_rate'}; % 
% jobs.aux2keep = {'Xaccel','Yaccel','Zaccel'}; % 

% jobs.aux2keep = {'Respiration_rate'}; % 
% jobs.aux2keep = {'Yaccel'}; % 




%% Initial trimming
jobs=nirs.modules.TrimBaseline(jobs); %this resamples the aux wrongly unless it is run after running nirs.cnl.pruneaux()
jobs.preBaseline   = 65; %this is a crude initial trimming to prepare the data for nirs.cnl.removeoutlierchannels
jobs.postBaseline  = 40;
jobs = nirs.modules.ExportData(jobs);
jobs.Output = 'raw_pruned_trimmed';
%% bandpass filter 
% jobs = eeg.modules.BandPassFilter(jobs);
jobs = nirs.cnl.BandPassFilter(jobs);
% jobs.highpass = 0.04*(2/8.9286); %normalized Wn = 2*f
jobs.highpass = 0.01; %Hz 
% jobs.filter_order = 16383;
jobs.filter_order = 4095;
% jobs.lowpass = 4*(2*pi/8.9286);
jobs.lowpass = 1;
jobs.do_downsample = false;
jobs = nirs.modules.ExportData(jobs);
jobs.Output = 'raw_pruned_trimmed_BPF';
% %%
% jobs = nirs.cnl.AddAuxRegressors2(jobs);
% jobs = nirs.modules.AddShortSeperationRegressors(jobs);

%% TDDR
% jobs = nirs.cnl.RemoveSideChannels(jobs); %remove S16, D18, S1, D1 ; all are often noisy and do not cover somatosensory areas. 
jobs = nirs.modules.TDDR(jobs);
jobs = nirs.modules.ExportData(jobs);
jobs.Output = 'raw_pruned_trimmed_BPF_TDDR';

%% repair outliers
jobs = nirs.cnl.repairoutlierchannels(jobs);
jobs.deviation_threshold = 10;
% jobs.dovisualize = false;
% jobs = nirs.modules.FixNaNs(jobs);
jobs = nirs.modules.ExportData(jobs);
jobs.Output = 'raw_pruned_trimmed_TDDR_outlierrepaired';
% 


%%
% jobs.clip_threshold = 97;
% jobs.aux2keep = {};

% jobs.aux2keep = {'CombinedAuxMotion','EMG_face'};
% jobs.aux2keep = {'Respiration_rate','EMG_face'};

% jobs.aux2keep = {'EMG_face'}; %better than xyz+emg_face
% jobs.aux2keep = {'NIRmidline'};

% jobs.aux2keep = {'NIRmidline','XYZ_acceleration'}; %
% jobs.aux2keep = {'XYZ_acceleration','Respiration_rate'}; %
% jobs.aux2keep = {'NIRmidline','XYZ_acceleration','Respiration_rate','Eyeblink_rate'}; %not good
% jobs.aux2keep = {'NIRmidline','XYZ_acceleration','Respiration_rate','mic'}; %not good
% jobs.aux2keep = {'NIRmidline','XYZ_acceleration','Respiration_rate','EMG_face'}; %not better
% jobs.aux2keep = {'NIRmidline','CombinedAuxMotion','Respiration_rate'}; % Much worse than mid+Xyz+resp

% jobs.aux2keep = {'EMG_face','NIRmidline'}; %better than xyz+emg_face
% jobs.aux2keep = {'CombinedAuxMotion','NIRmidline'}; %better than xyz+emg_face
% jobs.aux2keep = {'XYZ_acceleration'}; % Promising
% 
% % 
% jobs.aux2keep = {'XYZ_acceleration','EMG_face'};
% jobs.aux2keep = {'ADIpulsetransducer',...
%     'mic',...
%     'Eyeblink_rate',...
%     'EMG_face',...
%     'hand',... %EMG2_hand or EMG2_righthand
%     'XYZ_acceleration'...
%     'Respiration_rate',...
%     'CombinedAuxMotion',...
%     'NIRmidline'};%,...

% 
% jobs.aux2keep = {'ADIpulsetransducer',...
%     'mic',...
%     'Eyeblink_rate',...
%     'EMG_face',...
%     'hand',... %EMG2_hand or EMG2_righthand
%     'XYZ_acceleration'...
%     'Respiration_rate'};
%,...    % };
% jobs.aux2keep = {...'ADIpulsetransducer',...
%     'mic',...
%     ...'Eyeblink_rate',...
%     'EMG_face',...
%     ...'hand',... %EMG2_hand or EMG2_righthand
%     'XYZ_acceleration',...
%     'Respiration_rate'};%,...
% jobs.aux2keep = {...'ADIpulsetransducer',...
%     ...'Eyeblink_rate',...
%     ...'EMG_face',...
%     ...'hand',... %EMG2_hand or EMG2_righthand
%     'XYZ_acceleration'};%,...    % 'CombinedAuxMotion'}; %EMG_face and Accelrometer and ShortSeparation results in an unstable model
% ,'EMG_face'
% 
% jobs = nirs.modules.Kalman(jobs);
% 

%nirs.core.QTNirs(); ??


% %% bandpass filter 
% % jobs = eeg.modules.BandPassFilter(jobs);
% jobs = nirs.cnl.BandPassFilter(jobs);
% % jobs.highpass = 0.04*(2/8.9286); %normalized Wn = 2*f
% jobs.highpass = 0.01; %Hz 
% % jobs.filter_order = 16383;
% jobs.filter_order = 4095;
% % jobs.lowpass = 4*(2*pi/8.9286);
% jobs.lowpass = 1;
% jobs.do_downsample = false;
% jobs = nirs.modules.ExportData(jobs);
% jobs.Output = 'raw_pruned_trimmed_TDDR_BPF';
% % %%
% % jobs = nirs.cnl.AddAuxRegressors2(jobs);
% % jobs = nirs.modules.AddShortSeperationRegressors(jobs);

%%
% jobs=nirs.modules.TrimBaseline(jobs); %this resamples the aux wrongly unless it is run after running nirs.cnl.pruneaux()
% jobs.preBaseline   = 65; %this is a crude initial trimming to prepare the data for nirs.cnl.removeoutlierchannels
% jobs.postBaseline  = 40;
% jobs = nirs.modules.TDDR(jobs);
% jobs = nirs.cnl.removeoutlierchannels(jobs);
% jobs.deviation_threshold = 5;
% jobs = nirs.modules.ExportData(jobs);
% jobs.Output = 'raw_pruned_trimmed_TDDR_outlierrepaired';
% 
% jobs = nirs.modules.ExportData(jobs);
% jobs.Output = 'raw_trimmed';

% jobs = nirs.modules.TDDR(jobs);

% jobs = nirs.modules.FixNaNs(jobs);
% jobs = nirs.modules.BaselinePCAFilter(jobs);
% jobs = nirs.modules.ExportData(jobs);
% jobs = advanced.nirs.modules.ShortDistanceFilter(jobs);
% jobs.Output = 'raw_baselinePCAfiltered';

% jobs = nirs.modules.TDDR(jobs);
% jobs = nirs.modules.WaveletFilter(jobs);


% jobs = nirs.cnl.removeoutlierchannels(jobs);
% jobs.deviation_threshold = 5;
% jobs.deviation_threshold = 3;
% jobs.deviation_threshold = 5;
% jobs.deviation_threshold = 1.01;
% jobs = nirs.cnl.removeoutlierchannels(jobs);
% jobs.deviation_threshold = 2;
% jobs = nirs.modules.ExportData(jobs);
% jobs.Output = 'raw_pruned_trimmed_TDDR_sidechannelremoved_outlierrepaired';
% jobs = nirs.modules.TDDR(jobs);

% 
% 

%% Resample (optional)
jobs = nirs.modules.Resample(jobs);
jobs.Resample_Auxillary_Data = true;  %this
jobs.Fs = 2; % resample to 2 Hz
% % jobs.Fs = 8.9286;
% % jobs.Fs = 4; % resample to 5 Hz
jobs = nirs.modules.ExportData(jobs);
jobs.Output = 'raw_pruned_trimmed_TDDR_resampled2hz';
%% Final trimming



%

jobs = nirs.modules.TrimBaseline(jobs); %the actual trimming happens here to get rid of the end effects of the fir filter.
% jobs.preBaseline   = 40-trial_onset_shift;
jobs.preBaseline   = 30-trial_onset_shift;
jobs.postBaseline  = 30;

jobs = nirs.modules.ExportData(jobs);
jobs.Output = 'raw_2hz_allpreprocess';


%% Baseline Correction
% % jobs = nirs.modules.BaselineCorrection(jobs);
% jobs = nirs.modules.BaselinePCAFilter(jobs);
% jobs = nirs.modules.ExportData(jobs);
% jobs.Output = 'raw_2hz_allpreprocess_BPCAf';
% % jobs = advanced.nirs.modules.ShortSeperationCCAFilter(jobs);
% 


%% 
% jobs = nirs.cnl.RemoveSideChannels(jobs); %remove S16, D18, S1, D1 ; all are often noisy and do not cover somatosensory areas. 
% jobs = nirs.modules.ExportData(jobs);
% jobs.Output = 'raw_pruned_trimmed_TDDR_sidechannelremoved_outlierrepaired';

% jobs = advanced.nirs.modules.ShortDistanceFilter(jobs);


%%
jobs = nirs.cnl.AddAuxRegressors2(jobs);
% jobs = nirs.modules.AddShortSeperationRegressors(jobs);









%% Optical Density
% 
% jobs = nirs.modules.ExportData(jobs);
% jobs.Output = 'raw_SDfiltered';

% jobs = nirs.modules.ChangeStimulusInfo(jobs);
% jobs = nirs.modules.DiscardStims(jobs);
% jobs = nirs.modules.DiscardTypes(jobs);
% jobs = nirs.modules.RemoveStimGaps(jobs);
% jobs = nirs.modules.RemoveAuxFromStats(jobs);
% jobs = nirs.modules.DiscardTypes;
jobs = nirs.modules.OpticalDensity( jobs );
jobs = nirs.modules.ExportData(jobs);
jobs.Output='dOD';

%% Modified Beer-Lambert Law considering Age
jobs = nirs.modules.BeerLambertLaw( jobs );
jobs.PPF = @(lambda,data)nirs.media.frontal_DPF_model(lambda,data,'AgePrecise');% jobs = nirs.modules.TrimBaseline( jobs );
% jobs.PPF = @(lambda,data)nirs.media.frontal_DPF_model(lambda,data,'Age');% jobs = nirs.modules.TrimBaseline( jobs );
% jobs.preBaseline   = 30;
% jobs.postBaseline  = 30;

% jobs = nirs.modules.AddShortSeperationRegressors(jobs); This doesn't do
% anything(?) needs to be added after nirsmodules.GLM  j.AddShortSepRegressors = true; 


jobs = nirs.modules.ExportData(jobs);
jobs.Output='Hb';





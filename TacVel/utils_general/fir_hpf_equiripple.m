function b = fir_hpf_equiripple(varargin)
%FIR_HPF_EQUIRIPPLE Returns a discrete-time filter object.

% MATLAB Code
% Generated by MATLAB(R) 9.2 and the Signal Processing Toolbox 7.4.
% Generated on: 12-Jul-2017 16:14:07

% Equiripple Lowpass filter designed using the FIRPM function.

% All frequency values are in Hz.
% Designed using designFilter tool.
% Communication Neuroscience Laboratories,
% University of Nebraska-Lincoln,
% Mohsen Hozan hozan@huskers.unl.edu
% Date 2021

Fs = 1000;  % Default Sampling Frequency in Hz
if nargin>=1
    Fs = varargin{1};
end
Fpass = 50;
if nargin ==2
    Fpass = varargin{2};
end
    
%%
Fstop = Fpass;          % Stopband Frequency
Fpass = .9*Fpass;      	% Passband Frequency
Dpass = 0.01;       	% Passband Ripple
Dstop = 0.01;        	% Stopband Attenuation (-60 dB)
dens  = 40;             % Density Factor : b = firpm(...,{dens}) uses the integer dens to control the density of the frequency grid, which has roughly (lgrid*n)/(2*bw) frequency points, where bw is the fraction of the total frequency band interval [0,1] covered by f. Increasing lgrid often results in filters that more exactly match an equiripple filter, but that take longer to compute. 
a = [0 1];              % use [1 0] for low pass and [0 1] for highpass. Fpass and Fstop should be swapped accordingly.

% Calculate the order from the parameters using FIRPMORD.
[N, Fo, Ao, W] = firpmord([Fpass, Fstop]/(Fs/2), a, [Dpass, Dstop]);
N = 2^nextpow2(N); %round up N to next power of 2 for computational efficiency
% Calculate the coefficients using the FIRPM function.
b  = firpm(N, Fo, Ao, W, {dens}); %firpm designs a linear-phase FIR filter using the Parks-McClellan algorithm
% figure(444), clf, freqz(b,1,N,Fs)
% Hd = dfilt.dffir(b);

% [EOF]
